{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar baseUrl = \"http://127.0.0.1:3001\";\nexport var getPolicies = function getPolicies() {\n  var response;\n  return _regeneratorRuntime.async(function getPolicies$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"\".concat(baseUrl, \"/policies\"), {\n            method: \"GET\",\n            // *GET, POST, PUT, DELETE, etc.\n            mode: \"cors\",\n            // no-cors, *cors, same-origin\n            cache: \"no-cache\",\n            // *default, no-cache, reload, force-cache, only-if-cached\n            credentials: \"same-origin\",\n            // include, *same-origin, omit\n            headers: {\n              \"Content-Type\": \"application/json\" // 'Content-Type': 'application/x-www-form-urlencoded',\n\n            },\n            redirect: \"follow\",\n            // manual, *follow, error\n            referrerPolicy: \"no-referrer\" // no-referrer, *client\n\n          }));\n\n        case 2:\n          response = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 5:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var createPolicy = function createPolicy(data) {\n  var response;\n  return _regeneratorRuntime.async(function createPolicy$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"\".concat(baseUrl, \"/policies\"), {\n            method: \"POST\",\n            // *GET, POST, PUT, DELETE, etc.\n            mode: \"cors\",\n            // no-cors, *cors, same-origin\n            cache: \"no-cache\",\n            // *default, no-cache, reload, force-cache, only-if-cached\n            credentials: \"same-origin\",\n            // include, *same-origin, omit\n            headers: {\n              \"Content-Type\": \"application/json\" // 'Content-Type': 'application/x-www-form-urlencoded',\n\n            },\n            redirect: \"follow\",\n            // manual, *follow, error\n            referrerPolicy: \"no-referrer\",\n            // no-referrer, *client\n            body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n\n          }));\n\n        case 2:\n          response = _context2.sent;\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 5:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var updatePolicy = function updatePolicy(id, data) {\n  var response;\n  return _regeneratorRuntime.async(function updatePolicy$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"\".concat(baseUrl, \"/policies/\").concat(id), {\n            method: \"PUT\",\n            // *GET, POST, PUT, DELETE, etc.\n            mode: \"cors\",\n            // no-cors, *cors, same-origin\n            cache: \"no-cache\",\n            // *default, no-cache, reload, force-cache, only-if-cached\n            credentials: \"same-origin\",\n            // include, *same-origin, omit\n            headers: {\n              \"Content-Type\": \"application/json\" // 'Content-Type': 'application/x-www-form-urlencoded',\n\n            },\n            redirect: \"follow\",\n            // manual, *follow, error\n            referrerPolicy: \"no-referrer\",\n            // no-referrer, *client\n            body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n\n          }));\n\n        case 2:\n          response = _context3.sent;\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 5:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["C:/Users/bitingcold/Documents/Development/policy-crud/frontend/api/requestsHandler.js"],"names":["baseUrl","getPolicies","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","response","json","createPolicy","data","body","JSON","stringify","updatePolicy","id"],"mappings":";AAAA,IAAMA,OAAO,GAAG,uBAAhB;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACFC,KAAK,WAAIF,OAAJ,gBAAwB;AAClDG,YAAAA,MAAM,EAAE,KAD0C;AACnC;AACfC,YAAAA,IAAI,EAAE,MAF4C;AAEpC;AACdC,YAAAA,KAAK,EAAE,UAH2C;AAG/B;AACnBC,YAAAA,WAAW,EAAE,aAJqC;AAItB;AAC5BC,YAAAA,OAAO,EAAE;AACP,8BAAgB,kBADT,CAEP;;AAFO,aALyC;AASlDC,YAAAA,QAAQ,EAAE,QATwC;AAS9B;AACpBC,YAAAA,cAAc,EAAE,aAVkC,CAUpB;;AAVoB,WAAxB,CADH;;AAAA;AACnBC,UAAAA,QADmB;AAAA;AAAA,2CAcZA,QAAQ,CAACC,IAAT,EAdY;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;AAiBP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACHX,KAAK,WAAIF,OAAJ,gBAAwB;AAClDG,YAAAA,MAAM,EAAE,MAD0C;AAClC;AAChBC,YAAAA,IAAI,EAAE,MAF4C;AAEpC;AACdC,YAAAA,KAAK,EAAE,UAH2C;AAG/B;AACnBC,YAAAA,WAAW,EAAE,aAJqC;AAItB;AAC5BC,YAAAA,OAAO,EAAE;AACP,8BAAgB,kBADT,CAEP;;AAFO,aALyC;AASlDC,YAAAA,QAAQ,EAAE,QATwC;AAS9B;AACpBC,YAAAA,cAAc,EAAE,aAVkC;AAUnB;AAC/BK,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAX4C,CAWvB;;AAXuB,WAAxB,CADF;;AAAA;AACpBH,UAAAA,QADoB;AAAA;AAAA,2CAebA,QAAQ,CAACC,IAAT,EAfa;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;AAkBP,OAAO,IAAMM,YAAY,GAAG,SAAfA,YAAe,CAAOC,EAAP,EAAWL,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACHX,KAAK,WAAIF,OAAJ,uBAAwBkB,EAAxB,GAA8B;AACxDf,YAAAA,MAAM,EAAE,KADgD;AACzC;AACfC,YAAAA,IAAI,EAAE,MAFkD;AAE1C;AACdC,YAAAA,KAAK,EAAE,UAHiD;AAGrC;AACnBC,YAAAA,WAAW,EAAE,aAJ2C;AAI5B;AAC5BC,YAAAA,OAAO,EAAE;AACP,8BAAgB,kBADT,CAEP;;AAFO,aAL+C;AASxDC,YAAAA,QAAQ,EAAE,QAT8C;AASpC;AACpBC,YAAAA,cAAc,EAAE,aAVwC;AAUzB;AAC/BK,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAXkD,CAW7B;;AAX6B,WAA9B,CADF;;AAAA;AACpBH,UAAAA,QADoB;AAAA;AAAA,2CAebA,QAAQ,CAACC,IAAT,EAfa;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB","sourcesContent":["const baseUrl = \"http://127.0.0.1:3001\";\r\n\r\nexport const getPolicies = async () => {\r\n  const response = await fetch(`${baseUrl}/policies`, {\r\n    method: \"GET\", // *GET, POST, PUT, DELETE, etc.\r\n    mode: \"cors\", // no-cors, *cors, same-origin\r\n    cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n    credentials: \"same-origin\", // include, *same-origin, omit\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n      // 'Content-Type': 'application/x-www-form-urlencoded',\r\n    },\r\n    redirect: \"follow\", // manual, *follow, error\r\n    referrerPolicy: \"no-referrer\" // no-referrer, *client\r\n  });\r\n\r\n  return await response.json();\r\n};\r\n\r\nexport const createPolicy = async data => {\r\n  const response = await fetch(`${baseUrl}/policies`, {\r\n    method: \"POST\", // *GET, POST, PUT, DELETE, etc.\r\n    mode: \"cors\", // no-cors, *cors, same-origin\r\n    cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n    credentials: \"same-origin\", // include, *same-origin, omit\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n      // 'Content-Type': 'application/x-www-form-urlencoded',\r\n    },\r\n    redirect: \"follow\", // manual, *follow, error\r\n    referrerPolicy: \"no-referrer\", // no-referrer, *client\r\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\r\n  });\r\n\r\n  return await response.json();\r\n};\r\n\r\nexport const updatePolicy = async (id, data) => {\r\n  const response = await fetch(`${baseUrl}/policies/${id}`, {\r\n    method: \"PUT\", // *GET, POST, PUT, DELETE, etc.\r\n    mode: \"cors\", // no-cors, *cors, same-origin\r\n    cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n    credentials: \"same-origin\", // include, *same-origin, omit\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n      // 'Content-Type': 'application/x-www-form-urlencoded',\r\n    },\r\n    redirect: \"follow\", // manual, *follow, error\r\n    referrerPolicy: \"no-referrer\", // no-referrer, *client\r\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\r\n  });\r\n\r\n  return await response.json();\r\n};\r\n"]},"metadata":{},"sourceType":"module"}